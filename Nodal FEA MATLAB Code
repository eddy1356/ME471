% SI(mm) Unit Based
clear;

%Nodal Coordinates
nodes = [ 0,0; 0,2.5; 0,5; 10/3,5;10/3,2.5;10/3,0;20/3,0; 20/3,2.5;10,5;10,0];
node_coord = [ 0;0; 0;2.5; 0;5; 10/3;5;10/3;2.5;10/3;0;20/3;0; 20/3;2.5;10;5;10;0];

%Nodal connectivity matrix
connect = [1,2;2,3;3,4;4,5;5,6;6,7;7,8;8,9;9,10;1,6;2,5;5,8;4,9;7,10];

%Basic Properties
E = 1000;
v = 0.3;
n_nodes = size(nodes,1);
n_dof = 2 * n_nodes;
K = zeros(n_dof,n_dof);
F = zeros(n_dof,1);
Displacement = zeros(n_dof,1);

%Plane Strain
D = E / ((1 + v)*(1-2*v)) * [1-v, v, 0; v, 1-v, 0; 0, 0, 1/2*(1-2*v)];

%Elements
Iso_Element = [ 1,2,5,6 ; 2,3,4,5 ; 5,4,9,8 ; 6,5,8,7 ; 7,8,9,10];
n_element = size(Iso_Element,1);

%%Shape Functions
syms s t

N1 = 1/4 * (1 - t - s + s * t); dN1s = -1/4*(1-t); dN1t = -1/4*(1-s);
N2 = 1/4 * (1 - t + s - s * t); dN2s = 1/4*(1-t);dN2t = -1/4*(1+s);
N3 = 1/4 * (1 + t + s + s * t); dN3s = 1/4*(1+t); dN3t = 1/4*(1+s);
N4 = 1/4 * (1 + t - s - s * t); dN4s = -1/4*(1+t); dN4t = 1/4*(1-s);

Node1(s,t) = 1/4 * (1 - t - s + s * t);
Node2(s,t) = 1/4 * (1 - t + s - s * t);
Node3(s,t) = 1/4 * (1 + t + s + s * t);
Node4(s,t) = 1/4 * (1 + t - s - s * t);
for e = 1:n_element
    % Node Assignment
    n1 = Iso_Element(e,1); n2 = Iso_Element(e,2); n3 = Iso_Element(e,3); n4 = Iso_Element(e,4);
    
    %get the coordinates for each nodes
    x1 = nodes(n1,1); y1 = nodes(n1,2);
    x2 = nodes(n2,1); y2 = nodes(n2,2);
    x3 = nodes(n3,1); y3 = nodes(n3,2);
    x4 = nodes(n4,1); y4 = nodes(n4,2);
    
    a1 = -1 * x1 + x2 + x3 - x4; b1 = -1 * y1 + y2 + y3 - y4; 
    a2 = x1 - x2 + x3 - x4; b2 = y1 - y2 + y3 - y4; 
    a3 = -1 * x1 - x2 + x3 + x4; b3 = -1 * y1 - y2 + y3 + y4;
    
    syms s t;
    %Jacobian Matrix
    J = 1/4 * [(a1 + a2 * s), (b1 + b2 * t); (a3 + a2 * s), (b3 + b2 * t)];
    J1(s,t) = 1/4 * [(a1 + a2 * s), (b1 + b2 * t); (a3 + a2 * s), (b3 + b2 * t)];

    %Finding the B matrix
    ShapeFactor1 = inv(J) * [dN1s; dN1t];
    ShapeFactor2 = inv(J) *[dN2s; dN2t];
    ShapeFactor3 = inv(J) *[dN3s; dN3t];
    ShapeFactor4 = inv(J) *[dN4s; dN4t]; 
    
    B(s,t) = [ShapeFactor1(1,1), 0, ShapeFactor2(1,1), 0, ShapeFactor3(1,1), 0, ShapeFactor4(1,1),0;
        0, ShapeFactor1(2,1), 0, ShapeFactor2(2,1), 0, ShapeFactor3(2,1), 0, ShapeFactor4(2,1);
        ShapeFactor1(2,1),ShapeFactor1(1,1),ShapeFactor2(2,1),ShapeFactor2(1,1),ShapeFactor3(2,1),ShapeFactor3(1,1),ShapeFactor4(2,1),ShapeFactor4(1,1)];
    
    %Gauss Quadrature Method to find Local Stiffness Matrix
    c1 = 1/sqrt(3); c2 = -1/sqrt(3);
    k = transpose(B(c1,c1)) * D * B(c1,c1) * det(J1(c1,c1)) + transpose(B(c1,c2)) * D * B(c1,c2) * det(J1(c1,c2)) + transpose(B(c2,c1)) * D * B(c2,c1) * det(J1(c2,c1)) + transpose(B(c2,c2)) * D * B(c2,c2) * det(J1(c2,c2));
    
    %Global Stiffness Matrix
    location = [n1*2-1; n1*2; n2*2-1; n2*2; n3*2-1; n3*2; n4*2-1; n4*2];
    K(location,location) = K(location,location) + k;
    
    %load vector formation
    if e == 2 
        NT23(s,t) = [ 0, 0; 0, 0; Node2(s,1), 0; 0, Node2(s,1); Node3(s,1), 0; 0, Node3(s,1); 0, 0; 0, 0];
        temp = NT23(s,t) * [0;1];
        temp1 = @(s) 1/2 * (s + 1);
        nodalforce = 5000 * integral(temp1,-1,1);
        % after calculation the only difference between node 3 and 9 
        % is that force on node 9 is twice due to the increase in length of
        % the side. As a result only one case is required for element 2 and
        % 3.
        F(8,1) = nodalforce + F(8,1);  F(18,1) = 2*nodalforce + F(18,1);
    end
    
    if e == 5
        NT5(s,t) = [ 0, 0; 0, 0; 0, 0; 0, 0; Node3(1,t), 0; 0, Node3(1,t); 0, 0; 0, 0];
        temp = NT5(s,t) * [1;0];
        temp1 = @(t) 1/2 * (t + 1);
        nodalforce = 2500 * integral(temp1,0,1);
        F(17,1) = nodalforce + F(17,1);
    end
end

%Boundary Condition (U1 = V1 = U2 = U3 = V6 = V7 = V10 = 0)
Free = [4;6;7;8;9;10;11;13;15;16;17;18;19];
U1 = 1; V1 = 2; U2 = 3; U3 = 5; V6 = 12; V7 = 14; V10 = 20;
BC = [ U1; V1; U2; U3; V6; V7; V10];

K1 = K; F1 = F;
K1(BC(:,1),:) = []; K1(:,BC(:,1)) = []; F1(BC(:,1),:) = []; 

%Nodal Displacement
displacement_matrix = K1 \ F1;
%Final Displacement Matrix is called Displacement
Displacement(Free,1) = Displacement(Free,1) + displacement_matrix;


%%STRESS FOR 'A' ELEMENT
Stress = 1000*Displacement;
A_stress = zeros(8,1);
for i = 1:12
    Stress(i,1) = 0;
end
for i = 13:20
    A_stress(21 - i, 1) = Stress(i,1);
end
